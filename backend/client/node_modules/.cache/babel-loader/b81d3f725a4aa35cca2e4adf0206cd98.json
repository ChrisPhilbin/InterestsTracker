{"ast":null,"code":"var _jsxFileName = \"/home/user/development/react/interests/src/static/EmployeeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllEmployees } from '../actions/EmployeeActions';\nimport EmployeeCard from '../components/employees/EmployeeCard';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmployeeList = () => {\n  _s();\n\n  let dispatch = useDispatch();\n  let loading = useSelector(state => state.employees.loading);\n  let hasErrors = useSelector(state => state.employees.hasErrors);\n  let employees = useSelector(state => state.employees.employees);\n  useEffect(() => {\n    dispatch(fetchAllEmployees());\n  }, []);\n  console.log(employees, \"employees array from dispatch\");\n  console.log(loading, \"loading?\");\n  console.log(hasErrors, \"has errors?\");\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading... Please wait\"\n    }, void 0, false);\n  } else if (hasErrors) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Error. Something went wrong!\"\n    }, void 0, false);\n  } else if (employees) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: employees.map(employee => /*#__PURE__*/_jsxDEV(EmployeeCard, {\n        employee: employee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n};\n\n_s(EmployeeList, \"hw1xdsP/9biG6MsVlJZ6JPiIlS8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = EmployeeList;\nexport default EmployeeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"sources":["/home/user/development/react/interests/src/static/EmployeeList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","fetchAllEmployees","EmployeeCard","EmployeeList","dispatch","loading","state","employees","hasErrors","console","log","map","employee"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,MAAIC,QAAQ,GAAGL,WAAW,EAA1B;AAEA,MAAIM,OAAO,GAAKL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBF,OAA1B,CAA3B;AACA,MAAIG,SAAS,GAAGR,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,SAA1B,CAA3B;AACA,MAAID,SAAS,GAAGP,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBA,SAA1B,CAA3B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACH,iBAAiB,EAAlB,CAAR;AACH,GAFQ,EAEP,EAFO,CAAT;AAIAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAAuB,+BAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqB,UAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuB,aAAvB;;AAEA,MAAIH,OAAJ,EAAa;AACT,wBACI;AAAA;AAAA,qBADJ;AAKH,GAND,MAMO,IAAIG,SAAJ,EAAe;AAClB,wBACI;AAAA;AAAA,qBADJ;AAKH,GANM,MAMA,IAAID,SAAJ,EAAe;AAClB,wBACA;AAAA,gBACKA,SAAS,CAACI,GAAV,CAAeC,QAAD,iBACX,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEA;AAAxB;AAAA;AAAA;AAAA;AAAA,cADH;AADL,qBADA;AAOH;AACJ,CArCD;;GAAMT,Y;UAEaJ,W,EAECC,W,EACAA,W,EACAA,W;;;KANdG,Y;AAuCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchAllEmployees } from '../actions/EmployeeActions'\nimport EmployeeCard from '../components/employees/EmployeeCard'\n\nconst EmployeeList = () => {\n\n    let dispatch = useDispatch()\n\n    let loading   = useSelector(state => state.employees.loading)\n    let hasErrors = useSelector(state => state.employees.hasErrors)\n    let employees = useSelector(state => state.employees.employees)\n\n    useEffect(() => {\n        dispatch(fetchAllEmployees())\n    },[])\n\n    console.log(employees, \"employees array from dispatch\")\n    console.log(loading, \"loading?\")\n    console.log(hasErrors, \"has errors?\")\n\n    if (loading) {\n        return(\n            <>\n                Loading... Please wait\n            </>\n        )\n    } else if (hasErrors) {\n        return(\n            <>\n                Error. Something went wrong!\n            </>\n        )\n    } else if (employees) {\n        return(\n        <>\n            {employees.map((employee) => (\n                <EmployeeCard employee={employee} />\n            ))}\n        </>\n        )\n    }\n}\n\nexport default EmployeeList"]},"metadata":{},"sourceType":"module"}